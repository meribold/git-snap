#!/usr/bin/env bash

snapshot_branch=snapshots-$USER-$HOSTNAME

if ! HEAD=$(git symbolic-ref HEAD); then
   exit
fi

if ! index=$(mktemp); then
   exit
fi

git diff --staged > "$index" || exit

# See [1].
sco() {
   git symbolic-ref HEAD "$1"
}

sco "refs/heads/$snapshot_branch" || exit

# Use a trap to make sure we restore HEAD and the index no matter what.
cleanup() {
   sco "$HEAD" &&
   # Restore the index.
   git reset -q &&
   if [[ -s $index ]]; then
      # The patch exists and is not empty.  Apply it to the index "with the --cached
      # option".  See git-apply(1).
      git apply -q --cached "$index"
   fi
   rm "$index"
}
trap cleanup EXIT

# Unstage tracked files (untracked files that have been staged remain staged).  Using `--`
# after `git reset` prevents ambiguity (e.g. when a file doesn't exist in the working
# tree).
git ls-tree -r --full-tree --name-only @ | xargs --no-run-if-empty git reset -q --

# This will also commit new files that are already staged.  I think that's good.
git commit -q --no-verify -am 'Snapshot

This is a snapshot commit created by git-snap.

https://github.com/meribold/git-snap'

# [1]: https://stackoverflow.com/q/6070179
#      "Switching branches without touching the working tree?"
# [2]: https://github.com/qw3rtman/git-fire
